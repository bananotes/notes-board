// part code generated by AI
"use client";
import Image from "next/image";
import { Separator } from "@/components/ui/separator";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import {
  Command,
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
  CommandShortcut,
} from "@/components/ui/command";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Button } from "@/components/ui/button";
import { Terminal } from "lucide-react";
import { useState, useEffect } from "react";
import { Textarea } from "@/components/ui/textarea";
import { Sun, Moon } from "lucide-react"; 

// TODO: read from local storage
interface Note {
  userId: string;
  entries: string[];
  invisibleEntries: string[];
  createdTime: string;
  updatedTime: string;
}

// TODO: read from local storage
interface ReadEntriesParams {
  author?: string;
  content?: string;
  density?: number;
}

// TODO: read from local storage
async function fetchNotes(): Promise<Note[]> {
  await new Promise((resolve) => setTimeout(resolve, 500));

  return [
    {
      userId: "user123",
      entries: [
        "Work Meeting: Discuss project timeline",
        "Grocery List: Milk, eggs, bread",
      ],
      invisibleEntries: [],
      createdTime: "2024-03-14T10:00:00Z",
      updatedTime: "2024-03-14T10:00:00Z",
    },
    {
      userId: "user456",
      entries: [
        "Deadline Reminder: Submit report by Friday",
        "Birthday Party: Plan surprise party for mom",
      ],
      invisibleEntries: ["Secret note"],
      createdTime: "2024-02-14T09:00:00Z",
      updatedTime: "2024-07-14T15:00:00Z",
    },
    {
      userId: "user789",
      entries: [
        "Grocery List: Milk, eggs, bread",
        "Work Meeting: Discuss project timeline",
      ],
      invisibleEntries: [],
      createdTime: "2024-01-14T08:00:00Z",
      updatedTime: "2024-08-14T16:00:00Z",
    },
    {
      userId: "user101",
      entries: [
        "Grocery List: Milk, eggs, bread",
        "Work Meeting: Discuss project timeline",
      ],
      invisibleEntries: [],
      createdTime: "2024-01-14T08:00:00Z",
      updatedTime: "2024-08-14T16:00:00Z",
    },
    {
      userId: "user121",
      entries: [
        "Grocery List: Milk, eggs, bread",
        "Work Meeting: Discuss project timeline",
      ],
      invisibleEntries: [],
      createdTime: "2024-01-14T08:00:00Z",
      updatedTime: "2024-08-14T16:00:00Z",
    },
    {
      userId: "user131",
      entries: [
        "Grocery List: Milk, eggs, bread",
        "Work Meeting: Discuss project timeline",
      ],
      invisibleEntries: [],
      createdTime: "2024-01-14T08:00:00Z",
      updatedTime: "2024-08-14T16:00:00Z",
    },
    {
      userId: "user161",
      entries: [
        "Grocery List: Milk, eggs, bread",
        "Work Meeting: Discuss project timeline",
      ],
      invisibleEntries: [],
      createdTime: "2024-01-14T08:00:00Z",
      updatedTime: "2024-08-14T16:00:00Z",
    },
    {
      userId: "user171",
      entries: [
        "Grocery List: Milk, eggs, bread",
        "Work Meeting: Discuss project timeline",
      ],
      invisibleEntries: [],
      createdTime: "2024-01-14T08:00:00Z",
      updatedTime: "2024-08-14T16:00:00Z",
    },
    {
      userId: "user181",
      entries: [
        "Grocery List: Milk, eggs, bread",
        "Work Meeting: Discuss project timeline",
      ],
      invisibleEntries: [],
      createdTime: "2024-01-14T08:00:00Z",
      updatedTime: "2024-08-14T16:00:00Z",
    },
    {
      userId: "user191",
      entries: [
        "Grocery List: Milk, eggs, bread",
        "Work Meeting: Discuss project timeline",
      ],
      invisibleEntries: [],
      createdTime: "2024-01-14T08:00:00Z",
      updatedTime: "2024-08-14T16:00:00Z",
    },
    {
      userId: "user201",
      entries: [
        "Grocery List: Milk, eggs, bread",
        "Work Meeting: Discuss project timeline",
      ],
      invisibleEntries: [],
      createdTime: "2024-01-14T08:00:00Z",
      updatedTime: "2024-08-14T16:00:00Z",
    },
    {
      userId: "user211",
      entries: [
        "Grocery List: Milk, eggs, bread",
        "Work Meeting: Discuss project timeline",
      ],
      invisibleEntries: [],
      createdTime: "2024-01-14T08:00:00Z",
      updatedTime: "2024-08-14T16:00:00Z",
    },
    {
      userId: "user221",
      entries: [
        "Grocery List: Milk, eggs, bread",
        "Work Meeting: Discuss project timeline",
      ],
      invisibleEntries: [],
      createdTime: "2024-01-14T08:00:00Z",
      updatedTime: "2024-08-14T16:00:00Z",
    },
  ];
}

export default function Home() {
  const [allNotes, setAllNotes] = useState<Note[]>([]);
  const [theme, setTheme] = useState<"light" | "dark">("light");
  const [filteredNotes, setFilteredNotes] = useState<Note[]>([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState("");
  const [sortOrder, setSortOrder] = useState<"asc" | "desc">("desc");
  const itemsPerPage = 6;

  const toggleTheme = () => {
    setTheme(theme === "light" ? "dark" : "light");
  };

  useEffect(() => {
    fetchNotes().then((notes) => {
      setAllNotes(notes);
      setFilteredNotes(sortNotes(notes, sortOrder));
    });
  }, []);

  const sortNotes = (notes: Note[], order: "asc" | "desc") => {
    return [...notes].sort((a, b) => {
      const comparison =
        new Date(b.updatedTime).getTime() - new Date(a.updatedTime).getTime();
      return order === "desc" ? comparison : -comparison;
    });
  };

  useEffect(() => {
    let filtered = allNotes;
    if (searchTerm) {
      filtered = allNotes.filter(
        (note) =>
          note.entries.some((entry) =>
            entry.toLowerCase().includes(searchTerm.toLowerCase())
          ) ||
          note.updatedTime.includes(searchTerm) ||
          note.userId.includes(searchTerm) ||
          note.createdTime.includes(searchTerm)
      );
    }
    const sortedAndFiltered = sortNotes(filtered, sortOrder);
    setFilteredNotes(sortedAndFiltered);

    // Calculate the new current page
    const newTotalPages = Math.max(
      1,
      Math.ceil(sortedAndFiltered.length / itemsPerPage)
    );
    setCurrentPage((prevPage) => Math.min(prevPage, newTotalPages));
  }, [searchTerm, allNotes, sortOrder]);

  const totalPages = Math.max(
    1,
    Math.ceil(filteredNotes.length / itemsPerPage)
  );
  const paginatedNotes = filteredNotes.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const handlePageChange = (newPage: number) => {
    const validNewPage = Math.max(1, Math.min(newPage, totalPages));
    setCurrentPage(validNewPage);
  };

  return (
    <div className={`min-h-screen flex flex-col w-full pb-16 ${
      theme === "light" ? "bg-amber-25" : "bg-gray-900"
    }`}>
      <h1 className={`text-center text-6xl font-serif mb-2 tracking-wide pt-4 ${
        theme === "light" ? "text-amber-800" : "text-amber-200"
      }`}>
        My Notes
      </h1>
      <div className="mb-4 flex justify-center pr-4 pl-4">
        <div className="w-1/6 pr-2">
          <Command className={`w-full ${
              theme === "light" ? "bg-yellow-25" : "bg-gray-800"
            }`}>
            <CommandInput
              placeholder="Search notes..."
              value={searchTerm}
              onValueChange={setSearchTerm}
            />
            <CommandList>
              <CommandEmpty>No notes found.</CommandEmpty>
              <CommandGroup heading="Suggestions">
                <CommandItem onSelect={() => setSearchTerm("work")}>
                  Work
                </CommandItem>
                <CommandItem onSelect={() => setSearchTerm("personal")}>
                  Personal
                </CommandItem>
                <CommandItem onSelect={() => setSearchTerm("important")}>
                  Important
                </CommandItem>
              </CommandGroup>
            </CommandList>
          </Command>
        </div>

        <div className="w-5/6 pl-2">
          <div className="pl-5 flex justify-end pr-5">
            <Button
              variant="outline"
              className={`border-1 text-sm px-3 py-1 rounded-md text-yellow-900 hover:bg-neutral-100 border-zinic-25 ${
                theme === "light"
                  ? "text-yellow-900 hover:bg-neutral-100 border-zinc-25"
                  : "text-yellow-100 hover:bg-gray-700 border-gray-600"
              }`}
              onClick={toggleTheme}
            >
              {theme === "light" ? <Moon size={16} /> : <Sun size={16} />}
              {theme === "light" ? " Dark Mode" : " Light Mode"}
            </Button>

            <Button
              variant="outline"
              className="ml-8 border-1 text-sm px-3 py-1 rounded-md text-yellow-900 hover:bg-neutral-100 border-zinic-25"
              onClick={() =>
                setSortOrder(sortOrder === "desc" ? "asc" : "desc")
              }
            >
              Sort by {sortOrder === "desc" ? "Oldest" : "Latest"}
            </Button>
          </div>

          {paginatedNotes.length > 0 ? (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 pr-4 pt-2">
                {paginatedNotes.map((note) => (
                  <Card
                    key={note.userId}
                    className="bg-yellow-100 relative overflow-hidden transition-all duration-300 ease-in-out hover:shadow-lg hover:-translate-y-1"
                  >
                    <CardHeader>
                      <CardTitle>{note.entries[0]}</CardTitle>
                      <CardDescription>{note.userId}</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <p>{note.entries.slice(1).join(", ")}</p>
                    </CardContent>
                    <CardContent>
                      <p className="text-xs text-gray-500 mt-2">
                        Last edited:{" "}
                        {new Date(note.updatedTime).toLocaleDateString()}
                      </p>
                    </CardContent>
                    <CardFooter className="flex justify-end">
                      <Button
                        variant="outline"
                        className="border-0 mr-2 text-sm px-3 py-1 rounded-md text-yellow-900 hover:bg-neutral-100 shadow-md shadow-mr"
                        onClick={() => {
                          console.log("view?");
                          /* jump to edit page */
                        }}
                      >
                        view
                      </Button>
                    </CardFooter>
                  </Card>
                ))}
              </div>
              <div className="fixed bottom-0 left-0 right-0 w-full bg-yellow-25 py-4 shadow-md">
                <div className="container mx-auto flex justify-center items-center">
                  <Button
                    className="border-0 mr-2 text-sm px-3 py-1 rounded-md text-yellow-900 hover:bg-neutral-100 shadow-md shadow-mr"
                    variant="outline"
                    onClick={() => handlePageChange(currentPage - 1)}
                    disabled={currentPage === 1}
                  >
                    Previous
                  </Button>
                  <span className="mx-4 text-yellow-900">
                    Page {currentPage} of {totalPages}
                  </span>
                  <Button
                    className="border-0 mr-2 text-sm px-3 py-1 rounded-md text-yellow-900 hover:bg-neutral-100 shadow-md shadow-mr"
                    variant="outline"
                    onClick={() => handlePageChange(currentPage + 1)}
                    disabled={currentPage === totalPages}
                  >
                    Next
                  </Button>
                </div>
              </div>
            </>
          ) : (
            <div className="text-center text-gray-500">
              No matching notes found.
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
